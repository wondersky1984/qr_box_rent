import { Injectable, BadRequestException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../../core/prisma/prisma.service';

@Injectable()
export class TelegramOtpService {
  private readonly telegramGatewayUrl: string;
  private readonly telegramAccessToken: string;

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
  ) {
    this.telegramGatewayUrl = 'https://gatewayapi.telegram.org';
    this.telegramAccessToken = this.configService.get<string>('app.telegram.accessToken') || '';
    
    if (!this.telegramAccessToken) {
      throw new Error('TELEGRAM_ACCESS_TOKEN is required');
    }
  }

  async sendOtp(phone: string): Promise<{ success: boolean; message: string; requestId?: string }> {
    try {
      console.log('üì± Sending OTP to phone:', phone);
      console.log('üîë Telegram token available:', !!this.telegramAccessToken);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç E.164
      const normalizedPhone = this.normalizePhoneToE164(phone);
      console.log('üìû Normalized phone:', normalizedPhone);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π OTP –∫–æ–¥
      const code = Math.floor(100000 + Math.random() * 900000).toString();
      console.log('üî¢ Generated code:', code);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram Gateway API
      const response = await this.sendTelegramMessage(normalizedPhone, code);
      console.log('üì§ Telegram API response:', response);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å request_id
      await this.prisma.otpRequest.create({
        data: {
          phone: normalizedPhone,
          code,
          requestId: response.request_id,
          consumedAt: null,
          expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 –º–∏–Ω—É—Ç
        },
      });

      return {
        success: true,
        message: 'OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
        requestId: response.request_id,
      };
    } catch (error) {
      console.error('‚ùå Error sending Telegram OTP:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new BadRequestException('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –∫–æ–¥: ' + errorMessage);
    }
  }

  async verifyOtp(phone: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      const normalizedPhone = this.normalizePhoneToE164(phone);
      
      const otpRequest = await this.prisma.otpRequest.findFirst({
        where: {
          phone: normalizedPhone,
          code,
          consumedAt: null,
          expiresAt: {
            gt: new Date(),
          },
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      if (!otpRequest) {
        throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ Telegram Gateway API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ mock —Ä–µ–∂–∏–º)
      if (otpRequest.requestId && !otpRequest.requestId.startsWith('mock_')) {
        await this.checkVerificationStatus(otpRequest.requestId, code);
      }

      // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.prisma.otpRequest.update({
        where: { id: otpRequest.id },
        data: { consumedAt: new Date() },
      });

      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      };
    } catch (error) {
      console.error('Error verifying Telegram OTP:', error);
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
    }
  }

  private async sendTelegramMessage(phone: string, code: string): Promise<any> {
    try {
      console.log('üåê Making request to Telegram Gateway API...');
      console.log('üîó URL:', `${this.telegramGatewayUrl}/sendVerificationMessage`);
      console.log('üîë Token:', this.telegramAccessToken.substring(0, 10) + '...');
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
      const isMockMode = process.env.TELEGRAM_MOCK_MODE === 'true';
      
      if (isMockMode) {
        console.log('üß™ Mock mode enabled - simulating Telegram Gateway response');
        const mockRequestId = 'mock_' + Date.now();
        console.log(`üì§ Mock Telegram OTP sent to ${phone}: ${code}, request_id: ${mockRequestId}`);
        return {
          request_id: mockRequestId,
          phone_number: phone,
          status: 'sent'
        };
      }
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ timeout
      
      const response = await fetch(`${this.telegramGatewayUrl}/sendVerificationMessage`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.telegramAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone_number: phone,
          code: code,
          code_length: 6,
          ttl: 300, // 5 –º–∏–Ω—É—Ç
        }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('üì° Response status:', response.status);
      const data = await response.json();
      console.log('üìÑ Response data:', data);

      if (!data.ok) {
        throw new Error(`Telegram Gateway API error: ${data.error}`);
      }

      console.log(`üì§ Telegram OTP sent to ${phone}: ${code}, request_id: ${data.result.request_id}`);
      return data.result;
    } catch (error) {
      console.error('‚ùå Error sending Telegram message:', error);
      
      // –ï—Å–ª–∏ mock —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ fallback
      if (process.env.TELEGRAM_MOCK_MODE === 'false') {
        throw new Error(`Telegram Gateway API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : String(error)}`);
      }
      
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º
      console.log('üîÑ Falling back to mock mode due to network issues');
      const mockRequestId = 'mock_' + Date.now();
      console.log(`üì§ Mock Telegram OTP sent to ${phone}: ${code}, request_id: ${mockRequestId}`);
      return {
        request_id: mockRequestId,
        phone_number: phone,
        status: 'sent'
      };
    }
  }

  private async checkVerificationStatus(requestId: string, code: string): Promise<any> {
    try {
      const response = await fetch(`${this.telegramGatewayUrl}/checkVerificationStatus`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.telegramAccessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          request_id: requestId,
          code: code,
        }),
      });

      const data = await response.json();

      if (!data.ok) {
        throw new Error(`Telegram Gateway API error: ${data.error}`);
      }

      return data.result;
    } catch (error) {
      console.error('Error checking verification status:', error);
      throw error;
    }
  }

  private normalizePhoneToE164(phone: string): string {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const digits = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7
    if (digits.startsWith('7') && phone.startsWith('+')) {
      return '+' + digits;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if (digits.length === 10) {
      return '+7' + digits;
    }
    
    return phone; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
  }
}
